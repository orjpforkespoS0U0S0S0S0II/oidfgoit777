local ArrayField = loadstring(game:HttpGet('https://raw.githubusercontent.com/DINERO9/Array/main/UI-Libary.Lua'))()


local Window = ArrayField:CreateWindow({
   Name = "TeTraX-Official",
   LoadingTitle = "TeTraX",
   LoadingSubtitle = "by Dinero2483",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = "TeTraX", -- Create a custom folder for your hub/game
      FileName = "TeTraX.OFT"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "TeTraX-Official",
      Subtitle = "Click KEY For Link",
      FileName = "TeTraXXXXXEY", -- It is recommended to use something unique as other scripts using ArrayField may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like ArrayField to get the key from
      Actions = {
            [1] = {
                Text = 'KEY',
                OnPress = function()
                    print('TeTraX Key Copied!')
                    setclipboard("https://pastebin.com/raw/ySetB6qN") game:GetService("StarterGui"):SetCore("SendNotification",{
                     Title = "TeTraX-Official",
                     Text = "Link Copied!",
                  })
                end,
               }
            },
      Key = {"https://pastebin.com/raw/ySetB6qN"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})



local Tab = Window:CreateTab("Player💪", nil) -- Title, Image


local Button = Tab:CreateButton({
    Name = "Infinite Jump",
    Interact = 'Jump',
    Callback = function()
        local InfiniteJumpEnabled = true 
        game:GetService("UserInputService").JumpRequest:connect(function()
        if InfiniteJumpEnabled then
        game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
        end
        end)
    -- The function that takes place when the button is pressed
    end,
})

local Section = Tab:CreateSection("HitBox",true) -- The 2nd argument is to tell if its only a Title and doesnt contain elements

local Slider = Tab:CreateSlider({
   Name = "Hitbox Expander",
   Range = {0, 100},
   Increment = 1,
   Suffix = "Hitbox",
   CurrentValue = 10,
   Flag = "HitboxSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      _G.HeadSize = (Value)
      _G.Disabled = true

      game:GetService('RunService').RenderStepped:connect(function()
      if _G.Disabled then
      for i,v in next, game:GetService('Players'):GetPlayers() do
      if v.Name ~= game:GetService('Players').LocalPlayer.Name then
      pcall(function()
      v.Character.HumanoidRootPart.Size = Vector3.new(_G.HeadSize,_G.HeadSize,_G.HeadSize)
      v.Character.HumanoidRootPart.Transparency = 2
      v.Character.HumanoidRootPart.BrickColor = BrickColor.new("None")
      v.Character.HumanoidRootPart.Material = "Neon"
      v.Character.HumanoidRootPart.CanCollide = false
      end)
      end
      end
      end
      end)
   -- The function that takes place when the slider changes
   -- The variable (Value) is a number which correlates to the value the slider is currently at
   end,
})

local Section = Tab:CreateSection("Invisibility Toggle",true) -- The 2nd argument is to tell if its only a Title and doesnt contain elements


local Button = Tab:CreateButton({
   Name = "Invisible",
   Interact = 'Keybind',
   Callback = function()
       --[[Invisibility Toggle

You can find the orginal concept here: https://v3rmillion.net/showthread.php?tid=544634

This method clones the character locally, teleports the real character to a safe location, then sets the character to the clone.
Basically, your real character is in the sky while you are on the ground.


Because of the way this works, games with a decent anti-cheat will fck this up.
If you turn it off, you have to go to a safe place before going invisible.

Written by: BitingTheDust ; https://v3rmillion.net/member.php?action=profile&uid=1628149
]]
--Settings:
local ScriptStarted = false
local Keybind = "X" --Set to whatever you want, has to be the name of a KeyCode Enum.
local Transparency = true --Will make you slightly transparent when you are invisible. No reason to disable.
local NoClip = false --Will make your fake character no clip.

local Player = game:GetService("Players").LocalPlayer
local RealCharacter = Player.Character or Player.CharacterAdded:Wait()

local IsInvisible = false

RealCharacter.Archivable = true
local FakeCharacter = RealCharacter:Clone()
local Part
Part = Instance.new("Part", workspace)
Part.Anchored = true
Part.Size = Vector3.new(200, 1, 200)
Part.CFrame = CFrame.new(0, -500, 0) --Set this to whatever you want, just far away from the map.
Part.CanCollide = true
FakeCharacter.Parent = workspace
FakeCharacter.HumanoidRootPart.CFrame = Part.CFrame * CFrame.new(0, 5, 0)

for i, v in pairs(RealCharacter:GetChildren()) do
 if v:IsA("LocalScript") then
     local clone = v:Clone()
     clone.Disabled = true
     clone.Parent = FakeCharacter
 end
end
if Transparency then
 for i, v in pairs(FakeCharacter:GetDescendants()) do
     if v:IsA("BasePart") then
         v.Transparency = 0.7
     end
 end
end
local CanInvis = true
function RealCharacterDied()
 CanInvis = false
 RealCharacter:Destroy()
 RealCharacter = Player.Character
 CanInvis = true
 isinvisible = false
 FakeCharacter:Destroy()
 workspace.CurrentCamera.CameraSubject = RealCharacter.Humanoid

 RealCharacter.Archivable = true
 FakeCharacter = RealCharacter:Clone()
 Part:Destroy()
 Part = Instance.new("Part", workspace)
 Part.Anchored = true
 Part.Size = Vector3.new(200, 1, 200)
 Part.CFrame = CFrame.new(9999, 9999, 9999) --Set this to whatever you want, just far away from the map.
 Part.CanCollide = true
 FakeCharacter.Parent = workspace
 FakeCharacter.HumanoidRootPart.CFrame = Part.CFrame * CFrame.new(0, 5, 0)

 for i, v in pairs(RealCharacter:GetChildren()) do
     if v:IsA("LocalScript") then
         local clone = v:Clone()
         clone.Disabled = true
         clone.Parent = FakeCharacter
     end
 end
 if Transparency then
     for i, v in pairs(FakeCharacter:GetDescendants()) do
         if v:IsA("BasePart") then
             v.Transparency = 0.7
         end
     end
 end
RealCharacter.Humanoid.Died:Connect(function()
RealCharacter:Destroy()
FakeCharacter:Destroy()
end)
Player.CharacterAppearanceLoaded:Connect(RealCharacterDied)
end
RealCharacter.Humanoid.Died:Connect(function()
RealCharacter:Destroy()
FakeCharacter:Destroy()
end)
Player.CharacterAppearanceLoaded:Connect(RealCharacterDied)
local PseudoAnchor
game:GetService "RunService".RenderStepped:Connect(
 function()
     if PseudoAnchor ~= nil then
         PseudoAnchor.CFrame = Part.CFrame * CFrame.new(0, 5, 0)
     end
      if NoClip then
     FakeCharacter.Humanoid:ChangeState(11)
      end
 end
)

PseudoAnchor = FakeCharacter.HumanoidRootPart
local function Invisible()
 if IsInvisible == false then
     local StoredCF = RealCharacter.HumanoidRootPart.CFrame
     RealCharacter.HumanoidRootPart.CFrame = FakeCharacter.HumanoidRootPart.CFrame
     FakeCharacter.HumanoidRootPart.CFrame = StoredCF
     RealCharacter.Humanoid:UnequipTools()
     Player.Character = FakeCharacter
     workspace.CurrentCamera.CameraSubject = FakeCharacter.Humanoid
     PseudoAnchor = RealCharacter.HumanoidRootPart
     for i, v in pairs(FakeCharacter:GetChildren()) do
         if v:IsA("LocalScript") then
             v.Disabled = false
         end
     end

     IsInvisible = true
 else
     local StoredCF = FakeCharacter.HumanoidRootPart.CFrame
     FakeCharacter.HumanoidRootPart.CFrame = RealCharacter.HumanoidRootPart.CFrame

     RealCharacter.HumanoidRootPart.CFrame = StoredCF

     FakeCharacter.Humanoid:UnequipTools()
     Player.Character = RealCharacter
     workspace.CurrentCamera.CameraSubject = RealCharacter.Humanoid
     PseudoAnchor = FakeCharacter.HumanoidRootPart
     for i, v in pairs(FakeCharacter:GetChildren()) do
         if v:IsA("LocalScript") then
             v.Disabled = true
         end
     end
     IsInvisible = false
 end
end

game:GetService("UserInputService").InputBegan:Connect(
 function(key, gamep)
     if gamep then
         return
     end
     if key.KeyCode.Name:lower() == Keybind:lower() and CanInvis and RealCharacter and FakeCharacter then
         if RealCharacter:FindFirstChild("HumanoidRootPart") and FakeCharacter:FindFirstChild("HumanoidRootPart") then
             Invisible()
         end
     end
 end
)
local Sound = Instance.new("Sound",game:GetService("SoundService"))
Sound.SoundId = "rbxassetid://232127604"
Sound:Play()
game:GetService("StarterGui"):SetCore("SendNotification",{["Title"] = "Invisible Toggle Loaded",["Text"] = "Press "..Keybind.." to become change visibility.",["Duration"] = 20,["Button1"] = "Okay."})
   -- The function that takes place when the button is pressed
   end,
})


 local Section = Tab:CreateSection("Teleport to player",true) -- The 2nd argument is to tell if its only a Title and doesnt contain elements


plr = {}
for i,v in pairs(game:GetService("Players"):GetChildren()) do
    table.insert(plr,v.Name)
end
local Dropdown = Tab:CreateDropdown({
   Name = "Teleport To Player",
   Options = plr ,
   CurrentOption = "",
   MultiSelection = false, -- If MultiSelections is allowed
   Flag = "TPPLayer", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(t)
       PlayerTP = t
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[PlayerTP].Character.HumanoidRootPart.CFrame
   -- The function that takes place when the selected option is changed
   -- The variable (Option) is a string for the value that the dropdown was changed to
   end,
})


local Toggle = Tab:CreateToggle({
   Name = "Auto TP",
   Info = "Auto TP To Selected Player", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle998", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(t)
      _G.TPPlayer = t
      while _G.TPPlayer do wait()
      game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Players")[PlayerTP].Character.HumanoidRootPart.CFrame
  end
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Button = Tab:CreateButton({
   Name = "Refresh Players",
   Info = "Button info/Description.", -- Speaks for itself, Remove if none.
   Interact = 'Refreshes Player List',
   Callback = function()
    plr = {}
    for i,v in pairs(game:GetService("Players"):GetChildren()) do
        table.insert(plr,v.Name)
    end
    Dropdown:Refresh(plr)
   -- The function that takes place when the button is pressed
   end,
})

local Section = Tab:CreateSection("ChatSpy",true) -- The 2nd argument is to tell if its only a Title and doesnt contain elements


local Button = Tab:CreateButton({
   Name = "ChatSpy",
   Info = "", -- Speaks for itself, Remove if none.
   Interact = 'Changable',
   Callback = function()
   --This script reveals ALL hidden messages in the default chat

enabled = true --chat "/spy" to toggle!
spyOnMyself = true --if true will check your messages too
public = false --if true will chat the logs publicly (fun, risky)
publicItalics = true --if true will use /me to stand out
privateProperties = { --customize private logs
    Color = Color3.fromRGB(0,255,255); 
    Font = Enum.Font.SourceSansBold;
    TextSize = 18;
}


local StarterGui = game:GetService("StarterGui")
local Players = game:GetService("Players")
local player = Players.LocalPlayer or Players:GetPropertyChangedSignal("LocalPlayer"):Wait() or Players.LocalPlayer
local saymsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest")
local getmsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("OnMessageDoneFiltering")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

local function onChatted(p,msg)
    if _G.chatSpyInstance == instance then
        if p==player and msg:lower():sub(1,4)=="/spy" then
            enabled = not enabled
            wait(0.3)
            privateProperties.Text = "{SPY "..(enabled and "EN" or "DIS").."ABLED}"
            StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
        elseif enabled and (spyOnMyself==true or p~=player) then
            msg = msg:gsub("[\n\r]",''):gsub("\t",' '):gsub("[ ]+",' ')
            local hidden = true
            local conn = getmsg.OnClientEvent:Connect(function(packet,channel)
                if packet.SpeakerUserId==p.UserId and packet.Message==msg:sub(#msg-#packet.Message+1) and (channel=="All" or (channel=="Team" and public==false and Players[packet.FromSpeaker].Team==player.Team)) then
                    hidden = false
                end
            end)
            wait(1)
            conn:Disconnect()
            if hidden and enabled then
                if public then
                    saymsg:FireServer((publicItalics and "/me " or '').."{SPY} [".. p.Name .."]: "..msg,"All")
                else
                    privateProperties.Text = "{SPY} [".. p.Name .."]: "..msg
                    StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
                end
            end
        end
    end
end

for _,p in ipairs(Players:GetPlayers()) do
    p.Chatted:Connect(function(msg) onChatted(p,msg) end)
end
Players.PlayerAdded:Connect(function(p)
    p.Chatted:Connect(function(msg) onChatted(p,msg) end)
end)
privateProperties.Text = "{SPY "..(enabled and "EN" or "DIS").."ABLED}"
StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
if not player.PlayerGui:FindFirstChild("Chat") then wait(3) end
local chatFrame = player.PlayerGui.Chat.Frame
chatFrame.ChatChannelParentFrame.Visible = true
chatFrame.ChatBarParentFrame.Position = chatFrame.ChatChannelParentFrame.Position+UDim2.new(UDim.new(),chatFrame.ChatChannelParentFrame.Size.Y)
   -- The function that takes place when the button is pressed
   end,
})



local Tab = Window:CreateTab("Cash🤑⚡", nil) -- Title, Image

local Toggle = Tab:CreateToggle({
   Name = "Auto RobBank",
   Info = "Auto", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "AutoBBAll", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(abbb)
   _G.BB = abbb
   while _G.BB do wait()
      local bankthing = game:GetService("Workspace").BankRobbery.BankCash
      if #bankthing.Cash:GetChildren() > 0 then
         game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = bankthing.Main.CFrame
         wait()
         fireproximityprompt(game:GetService("Workspace").BankRobbery.VaultDoor.Door.Attachment.ProximityPrompt)
         fireproximityprompt(game:GetService("Workspace").BankRobbery.BankCash.Main.Attachment.ProximityPrompt)
      end
   end
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "AutoFarm Job",
   Info = "Farms any job", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "AutoJobAll", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(j)
   _G.AutoJob = j
   while _G.AutoJob do wait()
      for i,v in pairs(game:GetService("Workspace").Game.Local.Rubbish:GetDescendants())
      do
         if v:IsA("ClickDetector") then
            fireclickdetector(v)
         end
      end
   end
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "CashAura",
   Info = "Auto Pickup Cash", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "AutoJobAll", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(c)
   _G.AutoCashA = c
   while _G.AutoCashA do wait()
      for i,v in pairs(game:GetService("Workspace").Game.Entities.CashBundle:GetDescendants())
      do
         if v:IsA("ClickDetector") then
            fireclickdetector(v)
         end
      end
   end
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "ItemAura",
   Info = "Auto Pickup Items", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "AutoJobAll", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(e)
   _G.AutoItemG = e
   while _G.AutoItemG do wait()
      for i,v in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetDescendants())
      do
         if v:IsA("ProximityPrompt") then
            fireproximityprompt(v)
         end
      end
   end
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "JewelAura",
   Info = "Auto Loot Jewel Case", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "AutoJobAll", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(a)
   _G.AutoJewel = a
   while _G.AutoJewel do wait()
      for i,v in pairs(game:GetService("Workspace").GemRobbery.JewelryCases:GetDescendants())
      do
         if v:IsA("ProximityPrompt") then
            fireproximityprompt(v)
         end
      end
   end
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})



local Button = Tab:CreateButton({
   Name = "Fast ProximityPrompt",
   Interact = '',
   Callback = function()
   for i,v in pairs(game:GetService("Workspace"):GetDescendants()) do
      if v:IsA("ProximityPrompt") then
         v["HoldDuration"] = 0
      end
   end

   game:GetService("ProximityPromptService").PromptButtonHoldBegan:Connect(function(v)
      v["HoldDuration"] = 0
   end)
   -- The function that takes place when the button is pressed
   end,
})


local Toggle = Tab:CreateToggle({
   Name = "[BETA] TP BankCash & Collect",
   Info = "Toggle info/Description.", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "BBCTP", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(b)
         _G.TPPlayer = b
      while _G.TPPlayer do wait()
     local plr = game:service"Players".LocalPlayer;
     local tween_s = game:service"TweenService";
     local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
     function tp(...)
     local tic_k = tick();
     local params = {...};
     local cframe = CFrame.new(params[1],params[2],params[3]);
     local tween,err = pcall(function()
        local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
        tween:Play();
     end)
     if not tween then return err end
     end
     tp(1056.20263671875, 3.137938976287842, -344.6488037109375);

     fireproximityprompt(workspace.BankRobbery.VaultDoor.Door.Attachment.ProximityPrompt)
     fireproximityprompt(workspace.BankRobbery.BankCash.Main.Attachment.ProximityPrompt)
     end
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Button = Tab:CreateButton({
   Name = "Opens VaultDoor",
   Interact = 'VaultDoor',
   Callback = function()
   fireproximityprompt(workspace.BankRobbery.VaultDoor.Door.Attachment.ProximityPrompt)
   -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "Collect BankCash",
   Interact = 'BankCash',
   Callback = function()
   fireproximityprompt(workspace.BankRobbery.BankCash.Main.Attachment.ProximityPrompt)
   -- The function that takes place when the button is pressed
   end,
})



local Tab = Window:CreateTab("Scans💰💳🔫", nil) -- Title, Image




local Section = Tab:CreateSection("Safe Scans🔒",true) -- The 2nd argument is to tell if its only a Title and doesnt contain elements

ls = {}
for i,v in pairs(game:GetService("Workspace").Game.Entities.LargeSafe:GetChildren()) do
    table.insert(ls,v.Name)
end
local Dropdown = Tab:CreateDropdown({
   Name = "LargeSafes",
   Options = ls ,
   CurrentOption = "",
   MultiSelection = false, -- If MultiSelections is allowed
   Flag = "lsTP", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(t)
       lsTP = t
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Game.Entities.LargeSafe[lsTP].WorldPivot
   -- The function that takes place when the selected option is changed
   -- The variable (Option) is a string for the value that the dropdown was changed to
   end,
})

local Button = Tab:CreateButton({
    Name = "Scan LargeSafes",
    Info = "Scans for large safe", -- Speaks for itself, Remove if none.
    Interact = '',
    Callback = function()
     ls = {}
     for i,v in pairs(game:GetService("Workspace").Game.Entities.LargeSafe:GetChildren()) do
        table.insert(ls,v.Name)
     end
     Dropdown:Refresh(ls)
    -- The function that takes place when the button is prelsed
    end,
 })



ms = {}
for i,v in pairs(game:GetService("Workspace").Game.Entities.MediumSafe:GetChildren()) do
    table.insert(ms,v.Name)
end
local Dropdown = Tab:CreateDropdown({
   Name = "MediumSafes",
   Options = ms ,
   CurrentOption = "",
   MultiSelection = false, -- If MultiSelections is allowed
   Flag = "msTP", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(t)
       msTP = t
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Game.Entities.MediumSafe[msTP].WorldPivot
   -- The function that takes place when the selected option is changed
   -- The variable (Option) is a string for the value that the dropdown was changed to
   end,
})

local Button = Tab:CreateButton({
    Name = "Scan MediumSafes",
    Info = "Scans for medium safes", -- Speaks for itself, Remove if none.
    Interact = '',
    Callback = function()
     ms = {}
     for i,v in pairs(game:GetService("Workspace").Game.Entities.MediumSafe:GetChildren()) do
        table.insert(ms,v.Name)
     end
     Dropdown:Refresh(ms)
    -- The function that takes place when the button is premsed
    end,
 })



ss = {}
for i,v in pairs(game:GetService("Workspace").Game.Entities.SmallSafe:GetChildren()) do
    table.insert(ss,v.Name)
end
local Dropdown = Tab:CreateDropdown({
   Name = "SmallSafes",
   Options = ss ,
   CurrentOption = "",
   MultiSelection = false, -- If MultiSelections is allowed
   Flag = "ssTP", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(t)
       ssTP = t
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Game.Entities.SmallSafe[ssTP].WorldPivot
   -- The function that takes place when the selected option is changed
   -- The variable (Option) is a string for the value that the dropdown was changed to
   end,
})

local Button = Tab:CreateButton({
    Name = "Scan SmallSafes",
    Info = "Scans for small safes", -- Speaks for itself, Remove if none.
    Interact = '',
    Callback = function()
     ss = {}
     for i,v in pairs(game:GetService("Workspace").Game.Entities.SmallSafe:GetChildren()) do
        table.insert(ss,v.Name)
     end
     Dropdown:Refresh(ss)
    -- The function that takes place when the button is pressed
    end,
 })

 local Section = Tab:CreateSection("Item Scans🖨️🔫💳",true) -- The 2nd argument is to tell if its only a Title and doesnt contain elements


ipu = {}
for i,v in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
    table.insert(ipu,v:GetAttribute("itemName"))
    table.insert(ipu,v.Name)
end
local Dropdown = Tab:CreateDropdown({
   Name = "Teleport To Item",
   Options = ipu ,
   CurrentOption = "",
   MultiSelection = false, -- If MultiSelections is allowed
   Flag = "TPItem", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(t)
       PlayerTP = t
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Game.Entities.ItemPickup[PlayerTP].WorldPivot
   -- The function that takes place when the selected option is changed
   -- The variable (Option) is a string for the value that the dropdown was changed to
   end,
})


local Button = Tab:CreateButton({
   Name = "Rescan Items",
   Info = "Button info/Description.", -- Speaks for itself, Remove if none.
   Interact = 'Refreshes Item List',
   Callback = function()
    ipu = {}
    for i,v in pairs(game:GetService("Workspace").Game.Entities.ItemPickup:GetChildren()) do
        table.insert(ipu,v:GetAttribute("itemName"))
        table.insert(ipu,v.Name)
    end
    Dropdown:Refresh(ipu)
   -- The function that takes place when the button is pressed
   end,
})

 local Section = Tab:CreateSection("Airdrop Scans📦",true) -- The 2nd argument is to tell if its only a Title and doesnt contain elements

 ads = {}
for i,v in pairs(game:GetService("Workspace").Game.Airdrops:GetChildren()) do
    table.insert(ads,v.Name)
end
local Dropdown = Tab:CreateDropdown({
   Name = "Airdrops",
   Options = ads ,
   CurrentOption = "",
   MultiSelection = false, -- If MultiSelections is allowed
   Flag = "adsTP", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(t)
       adsTP = t
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Game.Airdrops[adsTP].WorldPivot
   -- The function that takes place when the selected option is changed
   -- The variable (Option) is a string for the value that the dropdown was changed to
   end,
})

local Button = Tab:CreateButton({
    Name = "Scan Airdrops",
    Info = "Scans for airdrops", -- Speaks for itself, Remove if none.
    Interact = '',
    Callback = function()
     ads = {}
     for i,v in pairs(game:GetService("Workspace").Game.Airdrops:GetChildren()) do
        table.insert(ads,v.Name)
     end
     Dropdown:Refresh(ads)
    -- The function that takes place when the button is preadsed
    end,
 })


local Tab = Window:CreateTab("BlackMarket🕴️", nil) -- Title, Image

local Button = Tab:CreateButton({
   Name = "BlackMarket Sell",
   Interact = 'TP Method',
   Callback = function()
      local plr = game:service"Players".LocalPlayer;
      local tween_s = game:service"TweenService";
      local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
      function tp(...)
         local tic_k = tick();
         local params = {...};
         local cframe = CFrame.new(params[1],params[2],params[3]);
         local tween,err = pcall(function()
             local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
             tween:Play();
         end)
         if not tween then return err end
      end
      tp(726.1677856445312, -27.880531311035156, -112.65306854248047);
   -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "BlackMarket Sell",
   Interact = 'Sell Items Anywhere Method',
   Callback = function()
   fireproximityprompt(workspace.BlackMarket.Dealer.Dealer.ProximityPrompt)
   -- The function that takes place when the button is pressed
   end,
})
local Section = Tab:CreateSection("Best Method Right Now",true) -- The 2nd argument is to tell if its only a Title and doesnt contain elements
local Toggle = Tab:CreateToggle({
   Name = "BlackMarket QuickSell Method",
   Info = "", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "BM", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireproximityprompt(workspace.BlackMarket.Dealer.Dealer.ProximityPrompt)
      game:GetService("RunService").RenderStepped:Wait()
      end 
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Tab = Window:CreateTab("TPWalk GUI🏃‍♂️", nil) -- Title, Image

local Button = Tab:CreateButton({
   Name = "TPWALK",
   Interact = 'GUI',
   Callback = function()
   --> Services <--
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Lighting = game:GetService("Lighting")

--> LocalPlayerPlayer Varaiables <--
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local playerCharacter = player.Character
local playerHumanoid = playerCharacter:WaitForChild("Humanoid")
local playerHumanoidRootPart = playerCharacter:WaitForChild("HumanoidRootPart")

--> Tpwalk Varaiables <--
local ToggleTpwalk = false
local TpwalkValue = 1
local TpwalkNegativeValues = false
local TpwalkConnection = nil



--> Creates a ScreenGui <--
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = playerGui
ScreenGui.Name = "TPWALK GUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.DisplayOrder = 999
ScreenGui.Enabled = true 
ScreenGui.IgnoreGuiInset = false
ScreenGui.AutoLocalize = true

--> Creates a Frame Within ScreenGui <--
local Frame = Instance.new("Frame")
Frame.Parent = ScreenGui
Frame.Name = "Container"
Frame.Size = UDim2.new(0, 0, 0, 0)
Frame.Position = UDim2.new(0.5, 0, 0.3, 0)
Frame.AnchorPoint = Vector2.new(0.5, 0.5)
Frame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
Frame.BackgroundTransparency = 0.34
Frame.BorderColor3 = Color3.new(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Visible = true
Frame.ZIndex = 999
Frame.Active = true
Frame.ClipsDescendants = true
Frame.Draggable = true
Frame.Rotation = 0
Frame.AutoLocalize = true
Frame.LayoutOrder = 0
Frame.SizeConstraint = Enum.SizeConstraint.RelativeXY

--> Creates a UICorner Within Frame <--
local FrameUICorner = Instance.new("UICorner")
FrameUICorner.Parent = Frame
FrameUICorner.CornerRadius = UDim.new(0.1, 0)

--> Creates a TextLabel Within Frame <--
local TextLabel = Instance.new("TextLabel")
TextLabel.Parent = Frame
TextLabel.Name = "Title"
TextLabel.Text = "TPWALK GUI"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.Font = Enum.Font.GothamBold
TextLabel.TextSize = 8
TextLabel.TextWrapped = true
TextLabel.TextScaled = false
TextLabel.TextXAlignment = Enum.TextXAlignment.Center
TextLabel.TextYAlignment = Enum.TextYAlignment.Center
TextLabel.RichText = false
TextLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
TextLabel.TextStrokeTransparency = 1
TextLabel.TextTransparency = 0
TextLabel.TextTruncate = Enum.TextTruncate.None
TextLabel.LineHeight = 1
TextLabel.MaxVisibleGraphemes = -1
TextLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.BackgroundTransparency = 1
TextLabel.BorderColor3 = Color3.new(0, 0, 0)
TextLabel.BorderSizePixel = 0
TextLabel.Size = UDim2.new(1, 0, 0, 0)
TextLabel.Position = UDim2.new(0.5, 0, 0.15, 0)
TextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
TextLabel.ZIndex = 999
TextLabel.Visible = true
TextLabel.ClipsDescendants = false
TextLabel.LayoutOrder = 1
TextLabel.Selectable = true
TextLabel.SizeConstraint = Enum.SizeConstraint.RelativeXY
TextLabel.Rotation = 0
TextLabel.AutoLocalize = true

--> Creates a Second TextLabel Within Frame <--
local SecondTextLabel = Instance.new("TextLabel")
SecondTextLabel.Parent = Frame
SecondTextLabel.Name = "Tpwalk Value Label"
SecondTextLabel.Text = ""..player.DisplayName
SecondTextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
SecondTextLabel.Font = Enum.Font.GothamBold
SecondTextLabel.TextSize = 8
SecondTextLabel.TextWrapped = true
SecondTextLabel.TextScaled = false
SecondTextLabel.TextXAlignment = Enum.TextXAlignment.Center
SecondTextLabel.TextYAlignment = Enum.TextYAlignment.Center
SecondTextLabel.RichText = false
SecondTextLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
SecondTextLabel.TextStrokeTransparency = 1
SecondTextLabel.TextTransparency = 0
SecondTextLabel.TextTruncate = Enum.TextTruncate.None
SecondTextLabel.LineHeight = 1
SecondTextLabel.MaxVisibleGraphemes = -1
SecondTextLabel.BackgroundColor3 = Color3.fromRGB(32, 32, 48)
SecondTextLabel.BackgroundTransparency = 0
SecondTextLabel.BorderColor3 = Color3.new(0, 0, 0)
SecondTextLabel.BorderSizePixel = 0
SecondTextLabel.Size = UDim2.new(0.85, 0, 0.125, 0)
SecondTextLabel.Position = UDim2.new(0.5, 0, 0.3, 0)
SecondTextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
SecondTextLabel.ZIndex = 999
SecondTextLabel.Visible = true
SecondTextLabel.ClipsDescendants = true
SecondTextLabel.LayoutOrder = 1
SecondTextLabel.Selectable = true
SecondTextLabel.SizeConstraint = Enum.SizeConstraint.RelativeXY
SecondTextLabel.Rotation = 0
SecondTextLabel.AutoLocalize = true


--> Creates a UICorner Within Second TextLabel <--
local SecondTextLabelUICorner = Instance.new("UICorner")
SecondTextLabelUICorner.Parent = SecondTextLabel
SecondTextLabelUICorner.CornerRadius = UDim.new(0.25, 0)



--> Creates a TextBox Within Frame <--
local TextBox = Instance.new("TextBox")
TextBox.Parent = Frame
TextBox.Name = ""
TextBox.Text = ""
TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
TextBox.TextScaled = false
TextBox.TextSize = 12
TextBox.Font = Enum.Font.GothamBold
TextBox.TextWrapped = true
TextBox.TextXAlignment = Enum.TextXAlignment.Center
TextBox.TextYAlignment = Enum.TextYAlignment.Center
TextBox.PlaceholderText = ""
TextBox.PlaceholderColor3 = Color3.fromRGB(178, 178, 178)
TextBox.ClearTextOnFocus = true
TextBox.MultiLine = true
TextBox.LineHeight = 1
TextBox.BackgroundColor3 = Color3.fromRGB(32, 32, 48)
TextBox.BackgroundTransparency = 0
TextBox.BorderColor3 = Color3.fromRGB(255, 255, 255)
TextBox.BorderSizePixel = 0
TextBox.Size = UDim2.new(0.85, 0, 0.125, 0)
TextBox.Position = UDim2.new(0.5, 0, 0.475, 0)
TextBox.AnchorPoint = Vector2.new(0.5, 0.5)
TextBox.Visible = true
TextBox.ZIndex = 999
TextBox.Selectable = true
TextBox.SelectionStart = 0
TextBox.CursorPosition = 0
TextBox.ShowNativeInput = true
TextBox.AutoLocalize = true
TextBox.LayoutOrder = 1
TextBox.MaxVisibleGraphemes = -1
TextBox.RichText = false
TextBox.Rotation = 0

--> Creates a UICorner Within TextBox <--
local TextBoxUICorner = Instance.new("UICorner")
TextBoxUICorner.Parent = TextBox
TextBoxUICorner.CornerRadius = UDim.new(0.25, 0)

--> Creates a TextButton Within Frame <--
local TextButton = Instance.new("TextButton")
TextButton.Parent = Frame
TextButton.Name = "Tpwalk Enabler"
TextButton.Size = UDim2.new(0.85, 0, 0.125, 0)
TextButton.Position = UDim2.new(0.5, 0, 0.655, 0)
TextButton.AnchorPoint = Vector2.new(0.5, 0.5)
TextButton.Text = "ON"
TextButton.Font = Enum.Font.GothamBold
TextButton.TextSize = 10
TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TextButton.BackgroundColor3 = Color3.fromRGB(0, 226, 45)
TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton.AutoButtonColor = true
TextButton.TextScaled = false
TextButton.TextWrapped = true
TextButton.TextXAlignment = Enum.TextXAlignment.Center
TextButton.TextYAlignment = Enum.TextYAlignment.Center
TextButton.Rotation = 0
TextButton.Visible = true
TextButton.ZIndex = 999
TextButton.Active = true
TextButton.Selectable = true
TextButton.Style = Enum.ButtonStyle.Custom

--> Creates a UICorner Within TextButton <--
local TextButtonUICorner = Instance.new("UICorner")
TextButtonUICorner.Parent = TextButton
TextButtonUICorner.CornerRadius = UDim.new(0.25, 0

)




--> Event Handler When The Player Respawns <--
player.CharacterAdded:Connect(function(NewCharacter)
        playerCharacter = NewCharacter
        playerHumanoid = playerCharacter:WaitForChild("Humanoid")
        playerHumanoidRootPart = playerCharacter:WaitForChild("HumanoidRootPart")
end)

--> Event Handler For Textbox Lost Focus <--
TextBox.FocusLost:Connect(function()
        local textInput = TextBox.Text
        local inputValue = tonumber(textInput)

        if not TpwalkNegativeValues then
                if textInput == "" then
                        TextBox.Text = ""
                        TextBox.PlaceholderText = "Set TPWalk Speed"
                        TextBox.TextSize = 8
                elseif not inputValue then
                        TextBox.Text = ""
                        TextBox.PlaceholderText = "Please, Enter a Number And Not Characters!"
                        TextBox.TextSize = 8
                elseif inputValue <= 0 then
                        TextBox.Text = ""
                        TextBox.PlaceholderText = "Set TPWalk Speed"
                        TextBox.TextSize = 8
                else
                        TpwalkValue = inputValue
                        SecondTextLabel.Text = "TPWalk Speed "..TpwalkValue
                        TextBox.TextSize = 14
                end
        else 
                if textInput == "" then
                        TextBox.Text = ""
                        TextBox.PlaceholderText = "Set TPWalk Speed"
                        TextBox.TextSize = 8
                elseif not inputValue then
                        TextBox.Text = ""
                        TextBox.PlaceholderText = "Please, Enter a Number And Not Characters!"
                        TextBox.TextSize = 8
                elseif inputValue == 0 then
                        TextBox.Text = ""
                        TextBox.PlaceholderText = "Set TPWalk Speed"
                        TextBox.TextSize = 8
                else
                        TpwalkValue = inputValue
                        SecondTextLabel.Text = "TPWalk Speed "..tostring(TpwalkValue)
                        TextBox.TextSize = 14
                end
        end
end)

--> Event Handler For Textbox Focused <--
TextBox.Focused:Connect(function()
        if SecondTextLabel.Text == ""..player.DisplayName then
                SecondTextLabel.Text = "TPWalk Speed "..TpwalkValue
        elseif TextBox.PlaceholderText == "Please, Enter a Number And Not Characters!" then
                TextBox.TextSize = 8
        else
                TextBox.TextSize = 14
        end
end)

--> Event Hanlder For TextButton Clicked [ Tpwalk Enabler Button ] <--
TextButton.MouseButton1Click:Connect(function()
        ToggleTpwalk = not ToggleTpwalk

        local function Tpwalking()
                if ToggleTpwalk and playerCharacter and playerHumanoid and playerHumanoidRootPart then
                        playerHumanoidRootPart.CFrame += (playerHumanoid.MoveDirection * TpwalkValue)
                        playerHumanoidRootPart.CanCollide = true
                end
        end

        if ToggleTpwalk and not TpwalkConnection then
                TpwalkConnection = RunService.Heartbeat:Connect(Tpwalking)
                TextButton.Text = "OFF"
                TextButton.BackgroundColor3 = Color3.fromRGB(255, 33, 33)

                if SecondTextLabel.Text == ""..player.DisplayName then
                        SecondTextLabel.Text = "TPWalk Speed "..TpwalkValue
                end

        elseif not ToggleTpwalk and TpwalkConnection then
                TpwalkConnection:Disconnect()
                TpwalkConnection = nil
                playerHumanoidRootPart.CanCollide = false
                TextButton.Text = "ON"
                TextButton.BackgroundColor3 = Color3.fromRGB(0, 226, 45)
        end
end)






local function StartScreenTween()

        local FrameStartTweenInfo = TweenInfo.new(1, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 1)
        local FrameStartTween = TweenService:Create(Frame, FrameStartTweenInfo, {Size = UDim2.new(0.1, 0, 0.175, 0)})

        FrameStartTween:Play()

        local FrameEndTweenInfo = TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, 0, false, 0)
        local FrameEndTween = TweenService:Create(Frame, FrameEndTweenInfo, {Size = UDim2.new(0, 75, 0.20, 0)})

        FrameStartTween.Completed:Connect(function()
                FrameEndTween:Play()
        end)
end


StartScreenTween()

   end,
})



local Tab = Window:CreateTab("Server🌐", nil) -- Title, Image


local Button = Tab:CreateButton({
   Name = "TP Ohio.[New]",
   Interact = 'TP Private Server',
   Callback = function()
   game:GetService('TeleportService'):Teleport(14767933027, LocalPlayer)
      -- The function that takes place when the button is pressed
   end,
})



local Tab = Window:CreateTab("TP📍", nil) -- Title, Image

local Section = Tab:CreateSection("Custom Teleports",true) -- The 2nd argument is to tell if its only a Title and doesnt contain elements

local Button = Tab:CreateButton({
   Name = "TP Arcade",
   Interact = 'TP',
   Callback = function()
    local plr = game:service"Players".LocalPlayer;
    local tween_s = game:service"TweenService";
    local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
    function tp(...)
    local tic_k = tick();
    local params = {...};
    local cframe = CFrame.new(params[1],params[2],params[3]);
    local tween,err = pcall(function()
       local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
       tween:Play();
    end)
       if not tween then return err end
    end
    tp(834.168701171875, 6.24685001373291, -888.8101196289062);
      -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "TP Bank",
   Interact = 'TP',
   Callback = function()
       local plr = game:service"Players".LocalPlayer;
       local tween_s = game:service"TweenService";
       local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
       function tp(...)
       local tic_k = tick();
       local params = {...};
       local cframe = CFrame.new(params[1],params[2],params[3]);
       local tween,err = pcall(function()
          local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
          tween:Play();
       end)
          if not tween then return err end
       end
       tp(1089.2777099609375, 8.169798851013184, -344.85955810546875);
      -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "TP BankCash",
   Interact = 'TP',
   Callback = function()
       local plr = game:service"Players".LocalPlayer;
       local tween_s = game:service"TweenService";
       local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
       function tp(...)
       local tic_k = tick();
       local params = {...};
       local cframe = CFrame.new(params[1],params[2],params[3]);
       local tween,err = pcall(function()
          local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
          tween:Play();
       end)
          if not tween then return err end
       end
       tp(1056.2086181640625, 8.96810245513916, -344.79864501953125);
      -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "TP FireStation",
   Interact = 'TP',
   Callback = function()
       local plr = game:service"Players".LocalPlayer;
       local tween_s = game:service"TweenService";
       local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
       function tp(...)
       local tic_k = tick();
       local params = {...};
       local cframe = CFrame.new(params[1],params[2],params[3]);
       local tween,err = pcall(function()
          local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
          tween:Play();
       end)
          if not tween then return err end
       end
       tp(1626.1756591796875, 8.06382942199707, -536.415771484375);
      -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "TP Grocery Store",
   Interact = 'TP',
   Callback = function()
       local plr = game:service"Players".LocalPlayer;
       local tween_s = game:service"TweenService";
       local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
       function tp(...)
       local tic_k = tick();
       local params = {...};
       local cframe = CFrame.new(params[1],params[2],params[3]);
       local tween,err = pcall(function()
          local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
          tween:Play();
       end)
          if not tween then return err end
       end
       tp(911.1165161132812, 6.245436191558838, -893.6758422851562);
      -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "TP GunStore 1",
   Interact = 'TP',
   Callback = function()
       local plr = game:service"Players".LocalPlayer;
       local tween_s = game:service"TweenService";
       local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
       function tp(...)
       local tic_k = tick();
       local params = {...};
       local cframe = CFrame.new(params[1],params[2],params[3]);
       local tween,err = pcall(function()
          local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
          tween:Play();
       end)
          if not tween then return err end
       end
       tp(1601.332275390625, 6.245392322540283, -615.8907470703125);
      -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "TP GunStore 2",
   Interact = 'TP',
   Callback = function()
       local plr = game:service"Players".LocalPlayer;
       local tween_s = game:service"TweenService";
       local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
       function tp(...)
       local tic_k = tick();
       local params = {...};
       local cframe = CFrame.new(params[1],params[2],params[3]);
       local tween,err = pcall(function()
          local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
          tween:Play();
       end)
          if not tween then return err end
       end
       tp(678.5928955078125, 6.245390892028809, -688.0462036132812);
      -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "TP GunStore 3",
   Interact = 'TP',
   Callback = function()
       local plr = game:service"Players".LocalPlayer;
       local tween_s = game:service"TweenService";
       local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
       function tp(...)
       local tic_k = tick();
       local params = {...};
       local cframe = CFrame.new(params[1],params[2],params[3]);
       local tween,err = pcall(function()
          local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
          tween:Play();
       end)
          if not tween then return err end
       end
       tp(1129.9774169921875, 25.343891143798828, -1337.3746337890625);
      -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "TP Gym",
   Interact = 'TP',
   Callback = function()
       local plr = game:service"Players".LocalPlayer;
       local tween_s = game:service"TweenService";
       local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
       function tp(...)
       local tic_k = tick();
       local params = {...};
       local cframe = CFrame.new(params[1],params[2],params[3]);
       local tween,err = pcall(function()
          local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
          tween:Play();
       end)
          if not tween then return err end
       end
       tp(1622.9190673828125, 6.345396518707275, -319.3541564941406);
      -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "TP Hospital",
   Interact = 'TP',
   Callback = function()
       local plr = game:service"Players".LocalPlayer;
       local tween_s = game:service"TweenService";
       local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
       function tp(...)
       local tic_k = tick();
       local params = {...};
       local cframe = CFrame.new(params[1],params[2],params[3]);
       local tween,err = pcall(function()
          local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
          tween:Play();
       end)
          if not tween then return err end
       end
       tp(1153.28955078125, 6.276763916015625, -975.0587158203125);
      -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "TP Jewelry",
   Interact = 'TP',
   Callback = function()
       local plr = game:service"Players".LocalPlayer;
       local tween_s = game:service"TweenService";
       local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
       function tp(...)
       local tic_k = tick();
       local params = {...};
       local cframe = CFrame.new(params[1],params[2],params[3]);
       local tween,err = pcall(function()
          local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
          tween:Play();
       end)
          if not tween then return err end
       end
       tp(1598.3031005859375, 8.369791030883789, -691.4287719726562);
      -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "TP Jewelry Activate",
   Interact = 'TP',
   Callback = function()
       local plr = game:service"Players".LocalPlayer;
       local tween_s = game:service"TweenService";
       local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
       function tp(...)
       local tic_k = tick();
       local params = {...};
       local cframe = CFrame.new(params[1],params[2],params[3]);
       local tween,err = pcall(function()
          local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
          tween:Play();
       end)
          if not tween then return err end
       end
       tp(1718.071044921875, 11.355670928955078, -736.5723266601562);
      -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
Name = "TP Military Base",
Interact = 'TP',
Callback = function()
    local plr = game:service"Players".LocalPlayer;
    local tween_s = game:service"TweenService";
    local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
    function tp(...)
    local tic_k = tick();
    local params = {...};
    local cframe = CFrame.new(params[1],params[2],params[3]);
    local tween,err = pcall(function()
       local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
       tween:Play();
    end)
       if not tween then return err end
    end
    tp(796.650390625, 25.2656192779541, -1368.020751953125);
   -- The function that takes place when the button is pressed
end,
})

local Button = Tab:CreateButton({
   Name = "TP PoliceStation",
   Interact = 'TP',
   Callback = function()
       local plr = game:service"Players".LocalPlayer;
       local tween_s = game:service"TweenService";
       local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
       function tp(...)
       local tic_k = tick();
       local params = {...};
       local cframe = CFrame.new(params[1],params[2],params[3]);
       local tween,err = pcall(function()
          local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
          tween:Play();
       end)
          if not tween then return err end
       end
       tp(647.1284790039062, 9.037802696228027, -862.6290283203125);
      -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "TP ShoeStore",
   Interact = 'TP',
   Callback = function()
       local plr = game:service"Players".LocalPlayer;
       local tween_s = game:service"TweenService";
       local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
       function tp(...)
       local tic_k = tick();
       local params = {...};
       local cframe = CFrame.new(params[1],params[2],params[3]);
       local tween,err = pcall(function()
          local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
          tween:Play();
       end)
          if not tween then return err end
       end
       tp(1438.9559326171875, 6.246395111083984, -361.7354736328125);
      -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "TP ShoeStore Hideout",
   Interact = 'TP',
   Callback = function()
       local plr = game:service"Players".LocalPlayer;
       local tween_s = game:service"TweenService";
       local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
       function tp(...)
       local tic_k = tick();
       local params = {...};
       local cframe = CFrame.new(params[1],params[2],params[3]);
       local tween,err = pcall(function()
          local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
          tween:Play();
       end)
          if not tween then return err end
       end
       tp(1459.2672119140625, 41.2963752746582, -342.5706481933594);
      -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
    Name = "TP Theater",
    Interact = 'TP',
    Callback = function()
        local plr = game:service"Players".LocalPlayer;
        local tween_s = game:service"TweenService";
        local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
        function tp(...)
        local tic_k = tick();
        local params = {...};
        local cframe = CFrame.new(params[1],params[2],params[3]);
        local tween,err = pcall(function()
           local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
           tween:Play();
        end)
           if not tween then return err end
        end
        tp(527.0411376953125, 6.246847152709961, -1032.37109375);
       -- The function that takes place when the button is pressed
    end,
})

local Button = Tab:CreateButton({
   Name = "TP Underground",
   Interact = 'TP',
   Callback = function()
    local plr = game:service"Players".LocalPlayer;
    local tween_s = game:service"TweenService";
    local info = TweenInfo.new(1,Enum.EasingStyle.Quad); --Everytime I tried going under 5, I got kicked/detected
    function tp(...)
    local tic_k = tick();
    local params = {...};
    local cframe = CFrame.new(params[1],params[2],params[3]);
    local tween,err = pcall(function()
       local tween = tween_s:Create(plr.Character["HumanoidRootPart"],info,{CFrame=cframe});
       tween:Play();
    end)
       if not tween then return err end
    end
    tp(369.20672607421875, -127.81851196289062, -423.2080993652344);
      -- The function that takes place when the button is pressed
   end,
})


local Section = Tab:CreateSection("Location Teleport",true) -- The 2nd argument is to tell if its only a Title and doesnt contain elements



lmn = {}
for i,v in pairs(game:GetService("Workspace").LandmarkNodes.Nodes:GetChildren()) do
    table.insert(lmn,v.Name)
end
local Dropdown = Tab:CreateDropdown({
   Name = "Teleport To Location",
   Options = lmn ,
   CurrentOption = "",
   MultiSelection = false, -- If MultiSelections is allowed
   Flag = "TPLoc", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(t)
       PlayerTP = t
game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").LandmarkNodes.Nodes[PlayerTP].CFrame
   -- The function that takes place when the selected option is changed
   -- The variable (Option) is a string for the value that the dropdown was changed to
   end,
})


local Tab = Window:CreateTab("Toggle Buy🔫", nil) -- Title, Image

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Bandage",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale.Bandage.Button.ClickDetector)         
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Baton",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale.Baton.Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Black Bandana",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle4", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale["Black Bandana"].Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Bloxaide",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle5", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale.Bloxaide.Button.ClickDetector)         
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Burger",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle6", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale.Burger.Button.ClickDetector)         
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Bundle of TNT",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle7", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale["Bundle of TNT"].Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy C4",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle8", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale.C4.Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Chicken",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle9", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale.Chicken.Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Clown Mallet",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle280", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale["Clown Mallet"].Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Coffee",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle291", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale.Coffee.Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Double Barrel",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle302", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale["Double Barrel"].Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Frag",
   Info = "", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle313", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale.Frag.Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Heavy C4",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle324", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale["Heavy C4"].Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Hockey Mask",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle335", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale["Hockey Mask"].Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Hoverboard",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle346", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale.Hoverboard.Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Katana",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle357", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale.Katana.Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Landmine",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle368", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale.Landmine.Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy M1911",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle37", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale.M1911.Button.ClickDetector)         
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy M4A1",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle20", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale.M4A1.Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Medium Vest",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle21", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale["Medium Vest"].Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Military Vest",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle22", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale["Military Vest"].Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy RayGun",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle23", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale.Raygun.Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy RPG",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle24", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale.RPG.Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Scythe",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle25", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale.Scythe.Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy Smoke",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle26", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale.Smoke.Button.ClickDetector)
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Buy USP",
   Info = "Toggle", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle27", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      getgenv().AutoBuy = Value

      while getgenv().AutoBuy == true do
      fireclickdetector(game:GetService("Workspace").ItemsOnSale["USP 45"].Button.ClickDetector)         
      game:GetService("RunService").RenderStepped:Wait()
      end      
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})




local Tab = Window:CreateTab("BETA🤫", nil) -- Title, Image
local Section = Tab:CreateSection("Mobile",true) -- The 2nd argument is to tell if its only a Title and doesnt contain elements
local Button = Tab:CreateButton({
    Name = "Keyboard",
    Interact = '',
    Callback = function()
        -- Gui to Lua
-- Version: 3.2

-- Instances:

loadstring(game:HttpGet(('https://raw.githubusercontent.com/advxzivhsjjdhxhsidifvsh/mobkeyboard/main/mob.txt'),true))()
local KeyboardguiWarriorRoberrVersion = Instance.new("ScreenGui")
local Drag = Instance.new("Frame")
local Close = Instance.new("TextButton")

--Properties:

KeyboardguiWarriorRoberrVersion.Name = "Keyboard gui WarriorRoberr Version"
KeyboardguiWarriorRoberrVersion.Parent = game.CoreGui
KeyboardguiWarriorRoberrVersion.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Drag.Name = "Drag"
Drag.Parent = KeyboardguiWarriorRoberrVersion
Drag.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Drag.BorderSizePixel = 0
Drag.Position = UDim2.new(0.147916675, 0, 0.0593749993, 0)
Drag.Size = UDim2.new(0, 270, 0, 30)
Drag.Active = true
Drag.Draggable = true

Close.Name = "Close"
Close.Parent = Drag
Close.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Close.BorderSizePixel = 0
Close.Position = UDim2.new(0.999839723, 0, -0.00729167089, 0)
Close.Size = UDim2.new(0, 30, 0, 30)
Close.Font = Enum.Font.SourceSans
Close.Text = "X"
Close.TextColor3 = Color3.fromRGB(255, 255, 255)
Close.TextSize = 35.000
Close.MouseButton1Click:Connect(function()
        KeyboardguiWarriorRoberrVersion:Destroy()
end)
game.CoreGui["BUNB0yBUN BOARD"].KeyBoard.Parent = Drag
game.CoreGui["BUNB0yBUN BOARD"]:Destroy()
game.CoreGui["Keyboard gui WarriorRoberr Version"].Drag.KeyBoard.Bunb0ybun.Text = "BETTER VERSION "
game.CoreGui["Keyboard gui WarriorRoberr Version"].Drag.KeyBoard.Position = UDim2.new(0, 0, 0, 35)
game.CoreGui["Keyboard gui WarriorRoberr Version"].Drag.KeyBoard.Bunb0ybun.TextSize = 10
    -- The function that takes place when the button is pressed
    end,
})

local Section = Tab:CreateSection("TO BE ADDED SOON",true) -- The 2nd argument is to tell if its only a Title and doesnt contain elements


local Toggle = Tab:CreateToggle({
   Name = "Bank Reset Notification",
   Info = "", -- Speaks for itself, Remove if none.
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(abn)
      _G.BB = abn
   while _G.BB do wait(3)
         local bankthing = game:GetService("Workspace").BankRobbery.BankCash
      if #bankthing.Cash:GetChildren() > 0 then
      game:GetService("StarterGui"):SetCore("SendNotification",{
                     Title = "TeTraX-Notification",
                     Text = "BANK VAULT RESET!",
                  })
      end
   end
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})
